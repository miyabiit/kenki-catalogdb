<%#<%= render 'stored_props_modal' +|%>
<div id="app">
<%= simple_form_for stock_product, url: url, html: { multipart: true } do |f| %>
  <%= f.button :submit, class: 'float-right btn btn-primary' %>
  <%= link_to '<戻る', back_url, class: 'btn btn-outline-primary', style: 'margin-bottom: 10px' %>
    <h3><%= title %></h3>

  <%= render "stock_products/product", product: @product if @product %>

  <div class="clearfix">
    <%= render('shared/validation_alert', model: stock_product) if stock_product.errors.any? %>
<%#    <%= f.input :id, wrapper: :horizontal_plaintext unless f.object.new_record? +|%>
    <%= f.hidden_field :product_id, value: params[:product_id] if params[:product_id].present? && stock_product.new_record? %>
    <%= f.association :category, collection: Category.accessible_by(current_ability).lasts %>
    <h5>サブカテゴリ</h5>
    <div id="product_sub_categories">
      <%= f.simple_fields_for :stock_product_sub_categories do |stock_product_sub_category| %>
        <%= render 'stock_products/stock_product_sub_category_fields', f: stock_product_sub_category %>
      <% end %>
      <div class="links">
        <%= link_to_add_association 'サブカテゴリ追加', f, :stock_product_sub_categories, partial: 'stock_products/stock_product_sub_category_fields', class: 'btn btn-secondary' %>
      </div>
    </div>
    <br>
    <%= input_unless_charted f, :video_url, base_name: 'video' %>
    <%= input_unless_charted f, :video_comment, base_name: 'video' %>
    <%= input_unless_charted f, :video_license, base_name: 'video' %>
    <%= input_unless_charted f, :video_license_valid, base_name: 'video' %>
    <%= input_unless_charted f, :video_published %>
    <%= input_unless_charted f, :video_charterable %>
    <%= f.input :spec %>
    <%= f.input :spec_comment %>
    <%= input_unless_charted f, :staff_comment %>
    <%= input_unless_charted f, :staff_comment_published %>
    <%= input_unless_charted f, :staff_comment_charterable %>
    <%= input_unless_charted f, :price_info %>
    <%= input_unless_charted f, :price_info_published %>
    <%= input_unless_charted f, :price_info_charterable %>
    <%= input_unless_charted f, :faq %>
    <%= input_unless_charted f, :faq_published %>
    <%= input_unless_charted f, :faq_charterable %>
    <%= input_unless_charted f, :description %>
    <%= input_unless_charted f, :description_published %>
    <%= input_unless_charted f, :description_charterable %>
    <%= input_unless_charted f, :address_info %>
    <%= input_unless_charted f, :address_info_published %>
    <%= input_unless_charted f, :address_info_charterable %>

    <h5>関連リンク</h5>
    <text-props :charter="charter" :stock_product_text_props="stock_product_text_props"></text-props>
    <br>
    <h5>ダウンロードファイル</h5>
    <file-props :charter="charter" :stock_product_file_props="stock_product_file_props"></file-props>
    <br>
    <h5>画像ファイル</h5>
    <image-props :charter="charter" :stock_product_image_props="stock_product_image_props"></image-props>
    <br>

    <%= f.input :company_memo %>
    <%= f.input :private_memo %>
    <%= f.input :meta_description %>
    <%= f.input :meta_keywords %>
    <%= f.input :charterable unless f.object.stock_product %>
  </div>
<% end %>
</div>

<script id="stored_props_tmpl" type="text/html">
  <div>
    <div class="form-group row" v-for="(spsp, index) in stock_product_stored_props" v-show="!spsp._destroy">
      <div class="col-md-4">
        <input type="text" placeholder="タイトル" v-model="spsp.stored_prop.name" :name="`stock_product[stock_product_${collection_name}_attributes][${index}][stored_prop_attributes][name]`" class="form-control string required" :readonly="!!spsp.stored_prop.source_id" :area-invalid="!spsp.stored_prop.name" :class="{'is-valid': spsp.stored_prop.name, 'is-invalid': !spsp.stored_prop.name}" required>
        <div class="invalid-feedback" v-show="!spsp.stored_prop.name">タイトルを入力してください。</div>
      </div>
      <div class="col-md-4">
        <slot :spsp="spsp" :index="index"></slot>
      </div>
      <div class="col-md-2">
        <fieldset class="form-group boolean optional">
          <div class="form-check">
            <input :name="`stock_product[stock_product_${collection_name}_attributes][${index}][published]`" type="hidden" value="0">
            <input type="checkbox" v-model="spsp.published" :name="`stock_product[stock_product_${collection_name}_attributes][${index}][published]`" :id="`stock_product_stock_product_${collection_name}_attributes_${index}_published`" class="form-check-input boolean optional">
            <label :for="`stock_product_stock_product_${collection_name}_attributes_${index}_published`" class="form-check-label boolean optional">
              公開</label>
          </div>
        </fieldset>
        <fieldset class="form-group boolean optional">
          <div v-if="!charter || spsp.stored_prop.source_id || spsp.charterable" class="form-check">
            <input :name="`stock_product[stock_product_${collection_name}_attributes][${index}][charterable]`" type="hidden" value="0" :disabled="!!spsp.stored_prop.source_id">
            <input type="checkbox" v-model="spsp.charterable" :name="`stock_product[stock_product_${collection_name}_attributes][${index}][charterable]`" :id="`stock_product_stock_product_${collection_name}_attributes_${index}_charterable`" class="form-check-input boolean optional" :disabled="!!spsp.stored_prop.source_id">
            <label :for="`stock_product_stock_product_${collection_name}_attributes_${index}_charterable`" class="form-check-label boolean optional">
              提供</label>
          </div>
        </fieldset>
      </div>
      <div class="col-md-2">
        <input v-model="spsp._destroy" type="hidden" :name="`stock_product[stock_product_${collection_name}_attributes][${index}][_destroy]`" :id="`stock_product_stock_product_${collection_name}_attributes_${index}__destroy`">
        <a v-show="!spsp.stored_prop.source_id" href="javascript:void(0);" class="btn btn-danger dynamic" @click="removeProp(spsp, index)">削除</a>
      </div>
      <input v-model="spsp.id" :name="`stock_product[stock_product_${collection_name}_attributes][${index}][id]`" type="hidden">
    </div>
    <div class="links">
      <a href="javascript:void(0);" class="btn btn-secondary" @click="addProp">{{ display_name }}追加</a>
    </div>
  </div>
</script>

<script id="text_props_tmpl" type="text/html">
  <stored-props :charter="charter" :init_stock_product_stored_props="stock_product_text_props" :collection_name="collection_name" :display_name="display_name">
    <template v-slot:default="slotProp">
      <textarea placeholder="URL" :name="`stock_product[stock_product_${collection_name}_attributes][${slotProp.index}][stored_prop_attributes][text_content]`" class="form-control text required" v-model="slotProp.spsp.stored_prop.text_content" :readonly="!!slotProp.spsp.stored_prop.source_id" :area-invalid="!slotProp.spsp.stored_prop.text_content" :class="{'is-valid': slotProp.spsp.stored_prop.text_content, 'is-invalid': !slotProp.spsp.stored_prop.text_content}" required> </textarea>
      <input type="hidden" :name="`stock_product[stock_product_${collection_name}_attributes][${slotProp.index}][stored_prop_attributes][source_id]`" v-model="slotProp.spsp.stored_prop.source_id">
      <input type="hidden" :name="`stock_product[stock_product_${collection_name}_attributes][${slotProp.index}][stored_prop_attributes][id]`" v-model="slotProp.spsp.stored_prop.id">
      <input value="TextProp" :name="`stock_product[stock_product_${collection_name}_attributes][${slotProp.index}][stored_prop_type]`" type="hidden">
      <div class="invalid-feedback" v-show="!slotProp.spsp.stored_prop.text_content">URLを入力してください。</div>
    </template>
  </stored-props>
</script>

<script id="file_props_tmpl" type="text/html">
  <stored-props :charter="charter" :init_stock_product_stored_props="stock_product_file_props" :collection_name="collection_name" :display_name="display_name">
    <template v-slot:default="slotProp">
      <div>{{ displayFileName(slotProp.spsp) }}</div>
      <button v-show="!slotProp.spsp.stored_prop.source_id" type="button" class="btn btn-primary" @click="uploadFile(slotProp.spsp, slotProp.index)">アップロード</button>
      <input :id="`file_prop_file_${slotProp.index}`" class="form-control-file file optional" type="file" :name="`stock_product[stock_product_file_props_attributes][${slotProp.index}][stored_prop_attributes][file]`" style="display: none;" @change="onFileChange($event, slotProp.spsp, slotProp.index)" :disabled="!!slotProp.spsp.stored_prop.source_id" required>
      <input type="hidden" :name="`stock_product[stock_product_file_props_attributes][${slotProp.index}][stored_prop_attributes][source_id]`" v-model="slotProp.spsp.stored_prop.source_id">
      <input type="hidden" :name="`stock_product[stock_product_file_props_attributes][${slotProp.index}][stored_prop_attributes][id]`" v-model="slotProp.spsp.stored_prop.id">
      <input value="FileProp" :name="`stock_product[stock_product_${collection_name}_attributes][${slotProp.index}][stored_prop_type]`" type="hidden">
      <div class="invalid-feedback" style="display: block;" v-show="!slotProp.spsp.stored_prop.file_name">ファイルをアップロードしてください。</div>
    </template>
  </stored-props>
</script>

<script id="image_props_tmpl" type="text/html">
  <stored-props :charter="charter" :init_stock_product_stored_props="stock_product_image_props" :collection_name="collection_name" :display_name="display_name">
    <template v-slot:default="slotProp">
      <div>{{ displayFileName(slotProp.spsp) }}</div>
      <button v-show="!slotProp.spsp.stored_prop.source_id" type="button" class="btn btn-primary" @click="uploadImage(slotProp.spsp, slotProp.index)">アップロード</button>
      <input :id="`image_prop_image_${slotProp.index}`" class="form-control-file file optional" type="file" :name="`stock_product[stock_product_image_props_attributes][${slotProp.index}][stored_prop_attributes][image]`" style="display: none;" @change="onFileChange($event, slotProp.spsp, slotProp.index)" :disabled="!!slotProp.spsp.stored_prop.source_id" required>
      <input type="hidden" :name="`stock_product[stock_product_image_props_attributes][${slotProp.index}][stored_prop_attributes][source_id]`" v-model="slotProp.spsp.stored_prop.source_id">
      <input type="hidden" :name="`stock_product[stock_product_image_props_attributes][${slotProp.index}][stored_prop_attributes][id]`" v-model="slotProp.spsp.stored_prop.id">
      <input value="ImageProp" :name="`stock_product[stock_product_${collection_name}_attributes][${slotProp.index}][stored_prop_type]`" type="hidden">
      <div class="invalid-feedback" style="display: block;" v-show="!slotProp.spsp.stored_prop.file_name">画像をアップロードしてください。</div>
    </template>
  </stored-props>
</script>

<script>

Vue.component('stored-props', {
  template: '#stored_props_tmpl',
  props: {
    charter: {
      type: Boolean,
      default: false
    },
    init_stock_product_stored_props: [],
    collection_name: {
      type: String
    },
    display_name: {
      type: String
    }
  },
  data() {
    return {
      stock_product_stored_props: this.init_stock_product_stored_props
    }
  },
  methods: {
    addProp() {
      this.stock_product_stored_props.push(
        {
          id: null,
          published: false,
          charterable: false,
          stored_prop: {
            id: null,
            name: '',
            text_content: '',
            url: '',
            file_name: '',
            file: null,
            image: null
          }
        }
      )
    },
    removeProp(stock_product_stored_prop, index) {
      if (stock_product_stored_prop.id) {
        stock_product_stored_prop._destroy = true
      } else {
        this.stock_product_stored_props.splice(index, 1)
      }
    },
  }
})

Vue.component('text-props', {
  template: '#text_props_tmpl',
  props: {
    charter: {
      type: Boolean,
      default: false
    },
    stock_product_text_props: [],
    collection_name: {
      type: String,
      default: 'text_props'
    },
    display_name: {
      type: String,
      default: '関連リンク'
    }
  },
})

Vue.component('file-props', {
  template: '#file_props_tmpl',
  props: {
    charter: {
      type: Boolean,
      default: false
    },
    stock_product_file_props: [],
    collection_name: {
      type: String,
      default: 'file_props'
    },
    display_name: {
      type: String,
      default: 'ダウンロードファイル'
    }
  },
  methods: {
    onFileChange(event, prop, index) {
      const target = event.target
      const file = target.files[0]
      prop.stored_prop.file_name = file.name
    },
    uploadFile(prop, index) {
      $(`#file_prop_file_${index}`).click()
    },
    displayFileName(prop) {
      if (prop.stored_prop.file_name) {
        return prop.stored_prop.file_name
      }
      return ''
    },
  }
})

Vue.component('image-props', {
  template: '#image_props_tmpl',
  props: {
    charter: {
      type: Boolean,
      default: false
    },
    stock_product_image_props: [],
    collection_name: {
      type: String,
      default: 'image_props'
    },
    display_name: {
      type: String,
      default: '画像'
    }
  },
  methods: {
    onFileChange(event, prop, index) {
      const target = event.target
      const file = target.files[0]
      prop.stored_prop.file_name = file.name
    },
    uploadImage(prop, index) {
      $(`#image_prop_image_${index}`).click()
    },
    displayFileName(prop) {
      if (prop.stored_prop.file_name) {
        return prop.stored_prop.file_name
      }
      return ''
    },
  }
})

var app = new Vue({
  el: '#app',
  data() {
    data = {
      charter: <%= raw (@stock_product.stock_product ? 'true' : 'false') %>,
      stock_product_text_props: <%= raw @stock_product.stock_product_text_props.to_json %>,
      stock_product_file_props: <%= raw @stock_product.stock_product_file_props.to_json %>,
      stock_product_image_props: <%= raw @stock_product.stock_product_image_props.to_json %>,
    }

    data.stock_product_text_props.forEach(function(tp) {
      tp._destroy = false
    })
    data.stock_product_file_props.forEach(function(fp) {
      fp._destroy = false
      if (!fp.stored_prop.source_id && !fp.stored_prop.id) {
        fp.stored_prop.file_name = ''
      }
    })
    data.stock_product_image_props.forEach(function(fp) {
      fp._destroy = false
      if (!fp.stored_prop.source_id && !fp.stored_prop.id) {
        fp.stored_prop.file_name = ''
      }
    })

    return data
  },
})
</script>
